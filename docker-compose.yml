version: '3.8'

services:
  # Security Service (Microservicio principal)
  security-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: security-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_PORT=3001
      # Base de datos
      - DB_HOST=postgres-security
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_DATABASE}
      # JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      postgres-security:
        condition: service_healthy
    networks:
      - security-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/docs || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  postgres-security:
    image: postgres:15-alpine
    container_name: postgres-security
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - security-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis (Opcional para cache/sesiones)
  redis-security:
    image: redis:7-alpine
    container_name: redis-security
    ports:
      - "6379:6379"
    networks:
      - security-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  security-network:
    driver: bridge